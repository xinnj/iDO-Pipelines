## Common process config
productName: ""

# Stop all running build of the same job
stopSameJob: true
# Stop all running build of the invoked job
stopInvokedJob: true

# Do UT and Code Analysis in parallel
parallelUtAnalysis: false

# Do Build and Archive in parallel
parallelBuildArchive: false

# Log more information
debug: true

# Source code root path. A relative path to workspace root folder
srcRootPath: "."

# Trigger by upstream projects
dependOn: []
#dependOn:
#  - name: ""
#    branch: ""

# Downstream projects to be invoked
jobsInvoked: []
#jobsInvoked:
#  - name: ""
#    branch: ""

# Customer build scripts
customerBuildScript:
  afterScm: "ido-cluster/after-scm"
  afterVersioning: "ido-cluster/after-versioning"
  beforeBuild: "ido-cluster/before-build"
  build: "ido-cluster/build.sh"
  afterBuild: "ido-cluster/after-build"
  afterArchive: "ido-cluster/after-archive"

## Node config
# "standalone", "k8s"
nodeType: "k8s"
nodeName: ""
podTemplate: ""
keepBuilderPodMinutes: 0

## Version config
# "GIT_DESCRIBE", "GIT_FILE", "JENKINS_BUILD_NUMBER"
versionMethod: "GIT_DESCRIBE"
# The git root path if versionMethod="GIT_DESCRIBE"
# The relative path of the directory in the workspace
versionRootPath: "."
# The file contains version data if versionMethod="GIT_FILE"
versionFile: "_version.txt"
# Specify the version of the build
version: ""

## Notification config
notification:
  # Notification type: "email", "slack", "dingtalk", "wecom"
  type: [ ]
  # Only notify failure result
  failureOnly: false
  # Send failure message to failure & success receivers
  sendFailureToSuccess: true
  # Email config
  email:
    # Folder property name, which value is a comma separated list of email recipients
    successReceiverFolderProperty: "IDO_NOTIFICATION_EMAIL"
    failureReceiverFolderProperty: "IDO_NOTIFICATION_FAILURE_EMAIL"
    # comma separated list of email recipients
    successReceiver: ""
    failureReceiver: ""
  # Slack config
  slack:
    successReceiverFolderProperty: "IDO_NOTIFICATION_SLACK"
    failureReceiverFolderProperty: "IDO_NOTIFICATION_FAILURE_SLACK"
    successReceiver: ""
    failureReceiver: ""
  # Dingtalk config
  dingtalk:
    successReceiverFolderProperty: "IDO_NOTIFICATION_DINGTALK"
    failureReceiverFolderProperty: "IDO_NOTIFICATION_FAILURE_DINGTALK"
    successReceiver: ""
    failureReceiver: ""
  # Wecom config
  wecom:
    successReceiverFolderProperty: "IDO_NOTIFICATION_WECOM"
    failureReceiverFolderProperty: "IDO_NOTIFICATION_FAILURE_WECOM"
    successReceiver: ""
    failureReceiver: ""

## Java common config
java:
  # "maven", "gradle"
  buildTool: "maven"
  # Builder image with JDK installed
  builderImage: "docker.io/eclipse-temurin:11-jdk"
  mavenVersion: "3.8.6"
  useDefaultMavenSettings: true
  gradleVersion: "7.6"
  useDefaultGradleInitScript: true
  moduleName: "."
  forceUpdateDependencies: false

## Docker image config
# Dockerfile used to build image
dockerFile: ""
# Pull registry info
registryPull:
  url: "docker.io"
  credentialsId: ""
# Push registry info
registryPush:
  url: "nexus-docker-5000:5000"
  credentialsId: "uploader"

## Helm chart config
helm:
  buildChart: true
  chartPath: "helm"
  repo: "http://nexus:8081/abc/nexus/repository/helm-hosted/"
  uploadCredentialId: "uploader"
  chartVersion: ""

## File server config
fileServer:
  uploadUrl: "http://file-server/upload"
  downloadUrl: "${IDO_FILE_URL}"
  # must end with '/'
  uploadRootPath: "/"

## SpringBoot config
springBoot:
  mainClass: ""
  appRoot: "/app"
  baseImage: "docker.io/eclipse-temurin:11-jre"
  jvmFlages: "-Duser.timezone=PRC -Dfile.encoding=UTF-8"
  environment: "TZ='Asia/Shanghai'"
  # Execute UT
  utEnabled: false
  lineCoverageThreshold: 0
  # execute code analysis
  codeAnalysisEnabled: false
  sonarqubeServerName: ""
  qualityGateEnabled: false
  sonarqubeTimeoutMinutes: 10

## NPM config
npm:
  builderImage: "docker.io/node:18.13.0-slim"
  useDefaultNpmrc: true

## Node.js config
nodejs:
  # Same as npm.builderImage if empty
  baseImage: ""
  StartCmd: "npm start"
  # Execute UT (Jest only)
  utEnabled: false
  lineCoverageThreshold: 0
  # Execute code analysis
  codeAnalysisEnabled: false
  sonarqubeServerName: ""
  qualityGateEnabled: false
  sonarqubeTimeoutMinutes: 10

## Node.js config
vue:
  # Must be nginx
  baseImage: "docker.io/nginx:stable"
  # Nginx config file to be copied to runtime container. A relative path to "srcRootPath" property.
  # Empty to use default config
  nginxConfigFile: ""
  # Execute UT (Vitest only)
  utEnabled: false
  lineCoverageThreshold: 0
  # Execute code analysis
  codeAnalysisEnabled: false
  sonarqubeServerName: ""
  qualityGateEnabled: false
  sonarqubeTimeoutMinutes: 10

## Android app config
android:
  sdkPackagesRequired: []
  buildDebug: false
  buildRelease: true
  # Execute UT
  utEnabled: false
  lineCoverageThreshold: 0
  # execute code analysis
  codeAnalysisEnabled: false
  sonarqubeServerName: ""
  qualityGateEnabled: false
  sonarqubeTimeoutMinutes: 10

## iOS app config
ios:
  # Use dedicated remote machine as the builder or not
  useRemoteBuilder: false
  # Credential ID of login account of builder machine
  loginCredentialId: "macos-builder-login"
  # The vm file if using internal vm as the builder
  macosImage: "ventura-v1.img"
  xcodePath: "/Applications/Xcode.app"
  # Credential ID of distribution certificate to be used
  # The certificate file (p12 format) need be imported into Jenkins as certificate credential
  distributionCertCredentialId: "apple_distribution"
  # Profiles to be imported if code sign style is Manual
  # profilesImport:
  #   - "<mobileprovision file, relative path to srcRootPath>"
  profilesImport: []
  # Workspace or project to be built, relative path to srcRootPath
  buildFile: ""
  # Export archive types
  # buildOptions:
  #   - name: "adhoc"
  #     scheme: "<scheme name>"
  #     configuration: "<Debug or Release>"
  #     signStyle: "<Automatic or Manual>"
  #     xcconfig: "<path to xcconfig file, relative path to srcRootPath>"
  #     exportOptionsPlist: "<path to exportOptionsPlist file, relative path to srcRootPath>"
  #   - name: "appstore"
  #     scheme: "<scheme name>"
  #     configuration: "<Debug or Release>"
  #     signStyle: "<Automatic or Manual>"
  #     xcconfig: "<path to xcconfig file, relative path to srcRootPath>"
  #     exportOptionsPlist: "<path to exportOptionsPlist file, relative path to srcRootPath>"
  buildOptions: []
  # Apple connect API key, used by automatic code sign
  authenticationKey:
    IssuerID: "69a6de7e-1093-47e3-e053-5b8c7c11a4d1"
    ID: "WP8BYJ39Z2"
    # Secret file credential
    keyFileCredentialId: "apple-auth-key"
  useCocoapods: false
  downloadDisplayImages:
    standard: "${IDO_FILE_URL}/ios-install-images/Install.png"
    fullSize: "${IDO_FILE_URL}/ios-install-images/Install-large.png"
  # Execute UT
  ut:
    enabled: false
    scheme: "Test"
    # Automatic or Manual
    signStyle: "Automatic"
    # Path to xcconfig file, relative path to srcRootPath
    xcconfig: ""
    # Code coverage is not supported yet
    lineCoverageThreshold: 0
  # execute code analysis
  codeAnalysisEnabled: false
  sonarqubeServerName: ""
  qualityGateEnabled: false
  sonarqubeTimeoutMinutes: 10

## dotnet app config
dotnet:
  # Use dedicated remote machine as the builder or not
  useRemoteBuilder: false
  # Credential ID of login account of builder machine
  loginCredentialId: "win-builder-login"
  # The vm file if using internal vm as the builder
  winImage: "win11-v1.img"
  sdkVersion: ""
  # Workloads to be installed by dotnet command
  workloads: []
  # Solution or project to be built, relative path to srcRootPath
  buildFile: ""
  # Debug or Release
  configuration: "Debug"
  # Publishes the application for a given runtime. See https://learn.microsoft.com/en-us/dotnet/core/rid-catalog
  runtime: ""
  # Wix Cover config file path
  msiConfig: ""
  # Execute UT
  ut:
    enabled: false
    # Test project path, relative path to srcRootPath
    project: ""
    lineCoverageThreshold: 0
  # execute code analysis
  codeAnalysisEnabled: false
  sonarqubeServerName: ""
  qualityGateEnabled: false
  sonarqubeTimeoutMinutes: 10