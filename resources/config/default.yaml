## Common process config
# All running and queued builds of the triggered job will be aborted if enabled
stopAllRunningBuild: true

# Source code root path. A relative path to workspace root folder
srcRootPath: "."

# Trigger by upstream projects
dependOn:
- name: ""
  branch: ""

# Build script file name
buildScript: "build-ci.sh"

## Node config
# "standalone", "k8s"
nodeType: "standalone"
nodeName: ""
podTemplate: ""
keepBuilderPod: false
keepBuilderPodMinutes: 240

## Version config
# "GIT_DESCRIBE", "GIT_FILE", "JENKINS_BUILD_NUMBER"
versionMethod: "GIT_DESCRIBE"
# The git root path if versionMethod="GIT_DESCRIBE"
# The relative path of the directory in the workspace
versionRootPath: "."
# The file contains version data if versionMethod="GIT_FILE"
versionFile: "_version.txt"
# Specify the version of the build
version: ""

## Notification config
notification:
  # Notification type: "email", "slack", "dingtalk"
  type: [ ]
  # Only notify failure result
  failureOnly: false
  # Send failure message to failure & success receivers
  sendFailureToSuccess: true
  # Email config
  email:
    # Folder property name, which value is a comma separated list of email recipients
    successReceiverFolderProperty: "IDO_NOTIFICATION_EMAIL"
    failureReceiverFolderProperty: "IDO_NOTIFICATION_FAILURE_EMAIL"
    # comma separated list of email recipients
    successReceiver: ""
    failureReceiver: ""
  # Slack config
  slack:
    successReceiverFolderProperty: "IDO_NOTIFICATION_SLACK"
    failureReceiverFolderProperty: "IDO_NOTIFICATION_FAILURE_SLACK"
    successReceiver: ""
    failureReceiver: ""
  # Dingtalk config
  dingtalk:
    successReceiverFolderProperty: "IDO_NOTIFICATION_DINGTALK"
    failureReceiverFolderProperty: "IDO_NOTIFICATION_FAILURE_DINGTALK"
    successReceiver: ""
    failureReceiver: ""

## Java common config
java:
  # "maven", "gradle"
  buildTool: "maven"
  # Builder image with JDK installed
  builderImage: "docker.io/amazoncorretto:8"
  mavenVersion: "3.8.6"
  useDefaultMavenSettings: true
  gradleVersion: "7.6"
  useDefaultGradleInitScript: true
  moduleName: "."
  forceUpdateDependencies: false

## Docker image config
# Name of generated image
imageName: ""
# Dockerfile used to build image
dockerFile: ""
# Pull registry info
registryPull:
  url: "docker.io"
  credentialsId: ""
# Push registry info
registryPush:
  url: "registry.cn-zhangjiakou.aliyuncs.com/bizconf_devops"
  credentialsId: "registry"

# Helm chart config
helm:
  buildChart: true
  chartPath: "helm"
  repo: "https://devops.bizconf.cn/nexus/repository/helm-hosted/"
  uploadCredentialId: "uploader"
  chartVersion: ""

## SpringBoot config
springBoot:
  mainClass: ""
  appRoot: "/app"
  baseImage: "docker.io/amazoncorretto:8"
  jvmFlages: "-Duser.timezone=PRC -Dfile.encoding=UTF-8"
  environment: "TZ='Asia/Shanghai'"
  # Execute UT
  utEnabled: false
  lineCoverageThreshold: 0
  # execute code analysis
  codeAnalysisEnabled: false
  sonarqubeServerName: ""
  qualityGateEnabled: false
  sonarqubeTimeoutMinutes: 10

## Node.js config
nodejs:
  baseImage: "docker.io/node:18.13.0-slim"
  useDefaultNpmrc: true
  StartCmd: "npm start"
  # Execute UT (Jest only)
  utEnabled: false
  lineCoverageThreshold: 0
  # Execute code analysis
  codeAnalysisEnabled: false
  sonarqubeServerName: ""
  qualityGateEnabled: false
  sonarqubeTimeoutMinutes: 10

## Node.js config
vue:
  builderBaseImage: "docker.io/node:18.13.0-slim"
  # Must be nginx
  runtimeBaseImage: "docker.io/nginx:stable"
  # Nginx config file to be copied to runtime container. A relative path to "srcRootPath" property.
  # Empty to use default config
  nginxConfigFile: ""
  useDefaultNpmrc: true
  # Execute UT (Vitest only)
  utEnabled: false
  lineCoverageThreshold: 0
  # Execute code analysis
  codeAnalysisEnabled: false
  sonarqubeServerName: ""
  qualityGateEnabled: false
  sonarqubeTimeoutMinutes: 10
